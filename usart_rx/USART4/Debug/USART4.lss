
USART4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800100  00800100  000001ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000833  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000771  00000000  00000000  00000a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000291  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d6  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000099  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_18>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a2 38       	cpi	r26, 0x82	; 130
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
  88:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  8c:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <getChar>:

char getChar(void)
{
	char ret = '\0';
	
	if(rxReadPos != rxWritePos)
  94:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <rxReadPos>
  98:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  9c:	98 17       	cp	r25, r24
  9e:	69 f0       	breq	.+26     	; 0xba <getChar+0x26>
	{
		ret = rxBuffer[rxReadPos];
  a0:	e9 2f       	mov	r30, r25
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	ee 5f       	subi	r30, 0xFE	; 254
  a6:	fe 4f       	sbci	r31, 0xFE	; 254
  a8:	80 81       	ld	r24, Z
		
		rxReadPos++;
  aa:	9f 5f       	subi	r25, 0xFF	; 255
		
		if(rxReadPos >= RX_BUFFER_SIZE)
  ac:	1a f0       	brmi	.+6      	; 0xb4 <getChar+0x20>
	
	if(rxReadPos != rxWritePos)
	{
		ret = rxBuffer[rxReadPos];
		
		rxReadPos++;
  ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <rxReadPos>
  b2:	08 95       	ret
		
		if(rxReadPos >= RX_BUFFER_SIZE)
		{
			rxReadPos = 0;
  b4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rxReadPos>
  b8:	08 95       	ret



char getChar(void)
{
	char ret = '\0';
  ba:	80 e0       	ldi	r24, 0x00	; 0
			rxReadPos = 0;
		}
	}
	
	return ret;
}
  bc:	08 95       	ret

000000be <main>:

char getChar(void);

int main(void)
{
	DDRB=0XFF;//led için user led çýkýþ olarak ayarlandý
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	84 b9       	out	0x04, r24	; 4
	
	/*register ayarlarý datasheet sayfa 222*/
	UBRR0H = (BRC >> 8);
  c2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =  BRC;
  c6:	87 e6       	ldi	r24, 0x67	; 103
  c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B = (1 << RXEN0)  | (1 << RXCIE0);
  cc:	80 e9       	ldi	r24, 0x90	; 144
  ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
		
	sei();
  d8:	78 94       	sei
	{
		char c = getChar();
		
		if(c == '1')
		{
			PORTB=0XFF;
  da:	cf ef       	ldi	r28, 0xFF	; 255
		
	sei();
	
	while(1)
	{
		char c = getChar();
  dc:	0e 94 4a 00 	call	0x94	; 0x94 <getChar>
		
		if(c == '1')
  e0:	81 33       	cpi	r24, 0x31	; 49
  e2:	11 f4       	brne	.+4      	; 0xe8 <main+0x2a>
		{
			PORTB=0XFF;
  e4:	c5 b9       	out	0x05, r28	; 5
  e6:	fa cf       	rjmp	.-12     	; 0xdc <main+0x1e>
		}
		else if(c =='0')
  e8:	80 33       	cpi	r24, 0x30	; 48
  ea:	c1 f7       	brne	.-16     	; 0xdc <main+0x1e>
		{
			PORTB=0X00;
  ec:	15 b8       	out	0x05, r1	; 5
  ee:	f6 cf       	rjmp	.-20     	; 0xdc <main+0x1e>

000000f0 <__vector_18>:
	
	return ret;
}

ISR(USART_RX_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	rxBuffer[rxWritePos] = UDR0;
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 10a:	e8 2f       	mov	r30, r24
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	ee 5f       	subi	r30, 0xFE	; 254
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	90 83       	st	Z, r25
	
	rxWritePos++;
 114:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(rxWritePos >= RX_BUFFER_SIZE)
 116:	1a f0       	brmi	.+6      	; 0x11e <__vector_18+0x2e>

ISR(USART_RX_vect)
{
	rxBuffer[rxWritePos] = UDR0;
	
	rxWritePos++;
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 11c:	02 c0       	rjmp	.+4      	; 0x122 <__vector_18+0x32>
	
	if(rxWritePos >= RX_BUFFER_SIZE)
	{
		rxWritePos = 0;
 11e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
