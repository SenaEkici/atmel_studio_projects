
spi_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000014a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c1  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000729  00000000  00000000  000009a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000224  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000013  00000000  00000000  000016dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a2 30       	cpi	r26, 0x02	; 2
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
  88:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <SPI_Init>:



void SPI_Init()					/* SPI Initialize function */
{
	DDRB &= ~((1<<3)|(1<<5)|(1<<2));  /* Make MOSI, SCK, SS as
  94:	84 b1       	in	r24, 0x04	; 4
  96:	83 7d       	andi	r24, 0xD3	; 211
  98:	84 b9       	out	0x04, r24	; 4
 						input pins */
	DDRB |= (1<<4);			/* Make MISO pin as 
  9a:	24 9a       	sbi	0x04, 4	; 4
						output pin */
	SPCR = (1<<SPE);			/* Enable SPI in slave mode */
  9c:	80 e4       	ldi	r24, 0x40	; 64
  9e:	8c bd       	out	0x2c, r24	; 44
  a0:	08 95       	ret

000000a2 <main>:
}

int main(void)
{
      
	SPI_Init();
  a2:	0e 94 4a 00 	call	0x94	; 0x94 <SPI_Init>
    char gelen_data;
    while (1) 
    {
		while(!(SPSR & (1<<SPIF) ));                  //Wait until transmission complete
  a6:	0d b4       	in	r0, 0x2d	; 45
  a8:	07 fe       	sbrs	r0, 7
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <main+0x4>
		gelen_data=SPDR;
  ac:	8e b5       	in	r24, 0x2e	; 46
		if (gelen_data=='A')
  ae:	81 34       	cpi	r24, 0x41	; 65
  b0:	d1 f7       	brne	.-12     	; 0xa6 <main+0x4>
		{
			x++;
  b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			if(x==5)
  c4:	05 97       	sbiw	r24, 0x05	; 5
  c6:	79 f7       	brne	.-34     	; 0xa6 <main+0x4>
			{
				x=0;
  c8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  d0:	ea cf       	rjmp	.-44     	; 0xa6 <main+0x4>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
