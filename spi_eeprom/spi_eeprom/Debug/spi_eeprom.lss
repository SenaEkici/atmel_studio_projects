
spi_eeprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000166  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000082a  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000776  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000296  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d9  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000001f  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a2 30       	cpi	r26, 0x02	; 2
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
  88:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <spi_transfer>:
unsigned char gonderilen;
unsigned char okunan;

char spi_transfer( char data)
{
	PORTB &= ~(1 << 2);
  94:	2a 98       	cbi	0x05, 2	; 5
	while(!(SPSR & (1<<SPIF)));	
  96:	0d b4       	in	r0, 0x2d	; 45
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <spi_transfer+0x2>
	SPDR=WREN;
  9c:	96 e0       	ldi	r25, 0x06	; 6
  9e:	9e bd       	out	0x2e, r25	; 46
	PORTB |= ~(1 << 2);
  a0:	95 b1       	in	r25, 0x05	; 5
  a2:	9b 6f       	ori	r25, 0xFB	; 251
  a4:	95 b9       	out	0x05, r25	; 5
	SPDR = data;                    // Start the transmission
  a6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));    // Wait the end of the transmission
  a8:	0d b4       	in	r0, 0x2d	; 45
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <spi_transfer+0x14>
	return SPDR;                    // return the received byte
  ae:	8e b5       	in	r24, 0x2e	; 46
}
  b0:	08 95       	ret

000000b2 <spi_init>:

void spi_init()
{

	DDRB=(1<<5)|(1<<3) | (1<<2);   //SPI portlarý B portlarýnda olduðu için MOSI VE SCK yi çýkýþ olarak ayarlamak gerekiyor.
  b2:	8c e2       	ldi	r24, 0x2C	; 44
  b4:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<< 4);    //MISO input
  b6:	24 98       	cbi	0x04, 4	; 4
	PORTB |= ~(1 << 2);     //disable device
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	8b 6f       	ori	r24, 0xFB	; 251
  bc:	85 b9       	out	0x05, r24	; 5
	         
	SPCR=(1<<SPE)|(1<<MSTR);     // Enable SPI, Set as Master,Prescaler: Fosc/16, Enable SPI Interrupts
  be:	80 e5       	ldi	r24, 0x50	; 80
  c0:	8c bd       	out	0x2c, r24	; 44
	PORTB &= ~(1 << 2);
  c2:	2a 98       	cbi	0x05, 2	; 5
  c4:	08 95       	ret

000000c6 <SPI_Read>:
}


char SPI_Read()	
{			
	SPDR = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	
  ca:	0d b4       	in	r0, 0x2d	; 45
  cc:	07 fe       	sbrs	r0, 7
  ce:	fd cf       	rjmp	.-6      	; 0xca <SPI_Read+0x4>
	return(SPDR);			
  d0:	8e b5       	in	r24, 0x2e	; 46
}
  d2:	08 95       	ret

000000d4 <main>:



int main(void)
{
	spi_init();
  d4:	0e 94 59 00 	call	0xb2	; 0xb2 <spi_init>
	
	PORTB |= ~(1 << 2);
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	8b 6f       	ori	r24, 0xFB	; 251
  dc:	85 b9       	out	0x05, r24	; 5

	while (1)
	{
		  
		
		spi_transfer('A');
  de:	81 e4       	ldi	r24, 0x41	; 65
  e0:	0e 94 4a 00 	call	0x94	; 0x94 <spi_transfer>
		okunan = SPI_Read();
  e4:	0e 94 63 00 	call	0xc6	; 0xc6 <SPI_Read>
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  ec:	f8 cf       	rjmp	.-16     	; 0xde <main+0xa>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
