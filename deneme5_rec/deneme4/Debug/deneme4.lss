
deneme4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000a1c  00000ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a3  00800128  00800128  00000ad8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002af6  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce4  00000000  00000000  00003826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013ce  00000000  00000000  0000450a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b0  00000000  00000000  000058d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ae  00000000  00000000  00005e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023fd  00000000  00000000  00006836  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00008c33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000006c <__trampolines_end>:
  6c:	45 00       	.word	0x0045	; ????
  6e:	00 82       	st	Z, r0
  70:	00 00       	nop
  72:	40 00       	.word	0x0040	; ????
  74:	20 00       	.word	0x0020	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d4 e0       	ldi	r29, 0x04	; 4
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ec e1       	ldi	r30, 0x1C	; 28
  8a:	fa e0       	ldi	r31, 0x0A	; 10
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a8 32       	cpi	r26, 0x28	; 40
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	23 e0       	ldi	r18, 0x03	; 3
  9a:	a8 e2       	ldi	r26, 0x28	; 40
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ab 3c       	cpi	r26, 0xCB	; 203
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 a0 04 	call	0x940	; 0x940 <main>
  ac:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <enc28j60ReadOp>:
  b4:	2a 98       	cbi	0x05, 2	; 5
  b6:	96 2f       	mov	r25, r22
  b8:	6f 71       	andi	r22, 0x1F	; 31
  ba:	86 2b       	or	r24, r22
  bc:	8e bd       	out	0x2e, r24	; 46
  be:	0d b4       	in	r0, 0x2d	; 45
  c0:	07 fe       	sbrs	r0, 7
  c2:	fd cf       	rjmp	.-6      	; 0xbe <enc28j60ReadOp+0xa>
  c4:	1e bc       	out	0x2e, r1	; 46
  c6:	0d b4       	in	r0, 0x2d	; 45
  c8:	07 fe       	sbrs	r0, 7
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <enc28j60ReadOp+0x12>
  cc:	99 23       	and	r25, r25
  ce:	24 f4       	brge	.+8      	; 0xd8 <enc28j60ReadOp+0x24>
  d0:	1e bc       	out	0x2e, r1	; 46
  d2:	0d b4       	in	r0, 0x2d	; 45
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <enc28j60ReadOp+0x1e>
  d8:	2a 9a       	sbi	0x05, 2	; 5
  da:	8e b5       	in	r24, 0x2e	; 46
  dc:	08 95       	ret

000000de <enc28j60WriteOp>:
  de:	2a 98       	cbi	0x05, 2	; 5
  e0:	6f 71       	andi	r22, 0x1F	; 31
  e2:	86 2b       	or	r24, r22
  e4:	8e bd       	out	0x2e, r24	; 46
  e6:	0d b4       	in	r0, 0x2d	; 45
  e8:	07 fe       	sbrs	r0, 7
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <enc28j60WriteOp+0x8>
  ec:	4e bd       	out	0x2e, r20	; 46
  ee:	0d b4       	in	r0, 0x2d	; 45
  f0:	07 fe       	sbrs	r0, 7
  f2:	fd cf       	rjmp	.-6      	; 0xee <enc28j60WriteOp+0x10>
  f4:	2a 9a       	sbi	0x05, 2	; 5
  f6:	08 95       	ret

000000f8 <enc28j60ReadBuffer>:
  f8:	fb 01       	movw	r30, r22
  fa:	2a 98       	cbi	0x05, 2	; 5
  fc:	2a e3       	ldi	r18, 0x3A	; 58
  fe:	2e bd       	out	0x2e, r18	; 46
 100:	0d b4       	in	r0, 0x2d	; 45
 102:	07 fe       	sbrs	r0, 7
 104:	fd cf       	rjmp	.-6      	; 0x100 <enc28j60ReadBuffer+0x8>
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	69 f0       	breq	.+26     	; 0x124 <enc28j60ReadBuffer+0x2c>
 10a:	df 01       	movw	r26, r30
 10c:	a8 0f       	add	r26, r24
 10e:	b9 1f       	adc	r27, r25
 110:	1e bc       	out	0x2e, r1	; 46
 112:	0d b4       	in	r0, 0x2d	; 45
 114:	07 fe       	sbrs	r0, 7
 116:	fd cf       	rjmp	.-6      	; 0x112 <enc28j60ReadBuffer+0x1a>
 118:	9e b5       	in	r25, 0x2e	; 46
 11a:	91 93       	st	Z+, r25
 11c:	ea 17       	cp	r30, r26
 11e:	fb 07       	cpc	r31, r27
 120:	b9 f7       	brne	.-18     	; 0x110 <enc28j60ReadBuffer+0x18>
 122:	01 c0       	rjmp	.+2      	; 0x126 <enc28j60ReadBuffer+0x2e>
 124:	df 01       	movw	r26, r30
 126:	1c 92       	st	X, r1
 128:	2a 9a       	sbi	0x05, 2	; 5
 12a:	08 95       	ret

0000012c <enc28j60WriteBuffer>:
 12c:	fb 01       	movw	r30, r22
 12e:	2a 98       	cbi	0x05, 2	; 5
 130:	2a e7       	ldi	r18, 0x7A	; 122
 132:	2e bd       	out	0x2e, r18	; 46
 134:	0d b4       	in	r0, 0x2d	; 45
 136:	07 fe       	sbrs	r0, 7
 138:	fd cf       	rjmp	.-6      	; 0x134 <enc28j60WriteBuffer+0x8>
 13a:	09 c0       	rjmp	.+18     	; 0x14e <enc28j60WriteBuffer+0x22>
 13c:	9f 01       	movw	r18, r30
 13e:	28 0f       	add	r18, r24
 140:	39 1f       	adc	r19, r25
 142:	91 91       	ld	r25, Z+
 144:	9e bd       	out	0x2e, r25	; 46
 146:	0d b4       	in	r0, 0x2d	; 45
 148:	07 fe       	sbrs	r0, 7
 14a:	fd cf       	rjmp	.-6      	; 0x146 <enc28j60WriteBuffer+0x1a>
 14c:	03 c0       	rjmp	.+6      	; 0x154 <enc28j60WriteBuffer+0x28>
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	a9 f7       	brne	.-22     	; 0x13c <enc28j60WriteBuffer+0x10>
 152:	03 c0       	rjmp	.+6      	; 0x15a <enc28j60WriteBuffer+0x2e>
 154:	2e 17       	cp	r18, r30
 156:	3f 07       	cpc	r19, r31
 158:	a1 f7       	brne	.-24     	; 0x142 <enc28j60WriteBuffer+0x16>
 15a:	2a 9a       	sbi	0x05, 2	; 5
 15c:	08 95       	ret

0000015e <enc28j60SetBank>:
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	18 2f       	mov	r17, r24
 166:	10 76       	andi	r17, 0x60	; 96
 168:	c1 2f       	mov	r28, r17
 16a:	d0 e0       	ldi	r29, 0x00	; 0
 16c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <Enc28j60Bank>
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	c8 17       	cp	r28, r24
 174:	d9 07       	cpc	r29, r25
 176:	b1 f0       	breq	.+44     	; 0x1a4 <enc28j60SetBank+0x46>
 178:	43 e0       	ldi	r20, 0x03	; 3
 17a:	6f e1       	ldi	r22, 0x1F	; 31
 17c:	80 ea       	ldi	r24, 0xA0	; 160
 17e:	0e 94 6f 00 	call	0xde	; 0xde <enc28j60WriteOp>
 182:	ae 01       	movw	r20, r28
 184:	55 95       	asr	r21
 186:	47 95       	ror	r20
 188:	55 95       	asr	r21
 18a:	47 95       	ror	r20
 18c:	55 95       	asr	r21
 18e:	47 95       	ror	r20
 190:	55 95       	asr	r21
 192:	47 95       	ror	r20
 194:	55 95       	asr	r21
 196:	47 95       	ror	r20
 198:	6f e1       	ldi	r22, 0x1F	; 31
 19a:	80 e8       	ldi	r24, 0x80	; 128
 19c:	0e 94 6f 00 	call	0xde	; 0xde <enc28j60WriteOp>
 1a0:	10 93 2a 01 	sts	0x012A, r17	; 0x80012a <Enc28j60Bank>
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	08 95       	ret

000001ac <enc28j60Read>:
 1ac:	cf 93       	push	r28
 1ae:	c8 2f       	mov	r28, r24
 1b0:	0e 94 af 00 	call	0x15e	; 0x15e <enc28j60SetBank>
 1b4:	6c 2f       	mov	r22, r28
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 5a 00 	call	0xb4	; 0xb4 <enc28j60ReadOp>
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <enc28j60Write>:
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	c8 2f       	mov	r28, r24
 1c6:	d6 2f       	mov	r29, r22
 1c8:	0e 94 af 00 	call	0x15e	; 0x15e <enc28j60SetBank>
 1cc:	4d 2f       	mov	r20, r29
 1ce:	6c 2f       	mov	r22, r28
 1d0:	80 e4       	ldi	r24, 0x40	; 64
 1d2:	0e 94 6f 00 	call	0xde	; 0xde <enc28j60WriteOp>
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <enc28j60PhyWrite>:
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	d6 2f       	mov	r29, r22
 1e2:	c7 2f       	mov	r28, r23
 1e4:	68 2f       	mov	r22, r24
 1e6:	84 ed       	ldi	r24, 0xD4	; 212
 1e8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 1ec:	6d 2f       	mov	r22, r29
 1ee:	86 ed       	ldi	r24, 0xD6	; 214
 1f0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 1f4:	6c 2f       	mov	r22, r28
 1f6:	87 ed       	ldi	r24, 0xD7	; 215
 1f8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 1fc:	c8 e2       	ldi	r28, 0x28	; 40
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <enc28j60PhyWrite+0x2a>
 200:	8c 2f       	mov	r24, r28
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <enc28j60PhyWrite+0x26>
 206:	8a ee       	ldi	r24, 0xEA	; 234
 208:	0e 94 d6 00 	call	0x1ac	; 0x1ac <enc28j60Read>
 20c:	80 fd       	sbrc	r24, 0
 20e:	f8 cf       	rjmp	.-16     	; 0x200 <enc28j60PhyWrite+0x24>
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <enc28j60clkout>:
 216:	68 2f       	mov	r22, r24
 218:	67 70       	andi	r22, 0x07	; 7
 21a:	85 e7       	ldi	r24, 0x75	; 117
 21c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 220:	08 95       	ret

00000222 <enc28j60Init>:
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
 228:	22 9a       	sbi	0x04, 2	; 4
 22a:	2a 9a       	sbi	0x05, 2	; 5
 22c:	84 b1       	in	r24, 0x04	; 4
 22e:	88 62       	ori	r24, 0x28	; 40
 230:	84 b9       	out	0x04, r24	; 4
 232:	24 9a       	sbi	0x04, 4	; 4
 234:	2b 9a       	sbi	0x05, 3	; 5
 236:	2d 9a       	sbi	0x05, 5	; 5
 238:	80 e5       	ldi	r24, 0x50	; 80
 23a:	8c bd       	out	0x2c, r24	; 44
 23c:	8d b5       	in	r24, 0x2d	; 45
 23e:	81 60       	ori	r24, 0x01	; 1
 240:	8d bd       	out	0x2d, r24	; 45
 242:	4f ef       	ldi	r20, 0xFF	; 255
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	0e 94 6f 00 	call	0xde	; 0xde <enc28j60WriteOp>
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <enc28j60Init+0x2e>
 254:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__data_end+0x1>
 258:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	88 e0       	ldi	r24, 0x08	; 8
 260:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	89 e0       	ldi	r24, 0x09	; 9
 268:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	8c e0       	ldi	r24, 0x0C	; 12
 270:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 27c:	6e ef       	ldi	r22, 0xFE	; 254
 27e:	8a e0       	ldi	r24, 0x0A	; 10
 280:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 284:	69 e1       	ldi	r22, 0x19	; 25
 286:	8b e0       	ldi	r24, 0x0B	; 11
 288:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 28c:	6f ef       	ldi	r22, 0xFF	; 255
 28e:	84 e0       	ldi	r24, 0x04	; 4
 290:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 294:	69 e1       	ldi	r22, 0x19	; 25
 296:	85 e0       	ldi	r24, 0x05	; 5
 298:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 29c:	6f ef       	ldi	r22, 0xFF	; 255
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 2a4:	6f e1       	ldi	r22, 0x1F	; 31
 2a6:	87 e0       	ldi	r24, 0x07	; 7
 2a8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 2ac:	60 eb       	ldi	r22, 0xB0	; 176
 2ae:	88 e3       	ldi	r24, 0x38	; 56
 2b0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 2b4:	6f e3       	ldi	r22, 0x3F	; 63
 2b6:	88 e2       	ldi	r24, 0x28	; 40
 2b8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 2bc:	60 e3       	ldi	r22, 0x30	; 48
 2be:	89 e2       	ldi	r24, 0x29	; 41
 2c0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 2c4:	69 ef       	ldi	r22, 0xF9	; 249
 2c6:	80 e3       	ldi	r24, 0x30	; 48
 2c8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 2cc:	67 ef       	ldi	r22, 0xF7	; 247
 2ce:	81 e3       	ldi	r24, 0x31	; 49
 2d0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 2d4:	6d e0       	ldi	r22, 0x0D	; 13
 2d6:	80 ec       	ldi	r24, 0xC0	; 192
 2d8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	81 ec       	ldi	r24, 0xC1	; 193
 2e0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 2e4:	42 e3       	ldi	r20, 0x32	; 50
 2e6:	62 ec       	ldi	r22, 0xC2	; 194
 2e8:	80 e8       	ldi	r24, 0x80	; 128
 2ea:	0e 94 6f 00 	call	0xde	; 0xde <enc28j60WriteOp>
 2ee:	62 e1       	ldi	r22, 0x12	; 18
 2f0:	86 ec       	ldi	r24, 0xC6	; 198
 2f2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 2f6:	6c e0       	ldi	r22, 0x0C	; 12
 2f8:	87 ec       	ldi	r24, 0xC7	; 199
 2fa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 2fe:	62 e1       	ldi	r22, 0x12	; 18
 300:	84 ec       	ldi	r24, 0xC4	; 196
 302:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 306:	6c ed       	ldi	r22, 0xDC	; 220
 308:	8a ec       	ldi	r24, 0xCA	; 202
 30a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 30e:	65 e0       	ldi	r22, 0x05	; 5
 310:	8b ec       	ldi	r24, 0xCB	; 203
 312:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 316:	68 81       	ld	r22, Y
 318:	84 ee       	ldi	r24, 0xE4	; 228
 31a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 31e:	69 81       	ldd	r22, Y+1	; 0x01
 320:	85 ee       	ldi	r24, 0xE5	; 229
 322:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 326:	6a 81       	ldd	r22, Y+2	; 0x02
 328:	82 ee       	ldi	r24, 0xE2	; 226
 32a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 32e:	6b 81       	ldd	r22, Y+3	; 0x03
 330:	83 ee       	ldi	r24, 0xE3	; 227
 332:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 336:	6c 81       	ldd	r22, Y+4	; 0x04
 338:	80 ee       	ldi	r24, 0xE0	; 224
 33a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 33e:	6d 81       	ldd	r22, Y+5	; 0x05
 340:	81 ee       	ldi	r24, 0xE1	; 225
 342:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	71 e0       	ldi	r23, 0x01	; 1
 34a:	80 e1       	ldi	r24, 0x10	; 16
 34c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <enc28j60PhyWrite>
 350:	8f e1       	ldi	r24, 0x1F	; 31
 352:	0e 94 af 00 	call	0x15e	; 0x15e <enc28j60SetBank>
 356:	40 ec       	ldi	r20, 0xC0	; 192
 358:	6b e1       	ldi	r22, 0x1B	; 27
 35a:	80 e8       	ldi	r24, 0x80	; 128
 35c:	0e 94 6f 00 	call	0xde	; 0xde <enc28j60WriteOp>
 360:	44 e0       	ldi	r20, 0x04	; 4
 362:	6f e1       	ldi	r22, 0x1F	; 31
 364:	80 e8       	ldi	r24, 0x80	; 128
 366:	0e 94 6f 00 	call	0xde	; 0xde <enc28j60WriteOp>
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <enc28j60PacketSend>:
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	ec 01       	movw	r28, r24
 37a:	8b 01       	movw	r16, r22
 37c:	0f c0       	rjmp	.+30     	; 0x39c <enc28j60PacketSend+0x2c>
 37e:	8c e1       	ldi	r24, 0x1C	; 28
 380:	0e 94 d6 00 	call	0x1ac	; 0x1ac <enc28j60Read>
 384:	81 ff       	sbrs	r24, 1
 386:	0a c0       	rjmp	.+20     	; 0x39c <enc28j60PacketSend+0x2c>
 388:	40 e8       	ldi	r20, 0x80	; 128
 38a:	6f e1       	ldi	r22, 0x1F	; 31
 38c:	80 e8       	ldi	r24, 0x80	; 128
 38e:	0e 94 6f 00 	call	0xde	; 0xde <enc28j60WriteOp>
 392:	40 e8       	ldi	r20, 0x80	; 128
 394:	6f e1       	ldi	r22, 0x1F	; 31
 396:	80 ea       	ldi	r24, 0xA0	; 160
 398:	0e 94 6f 00 	call	0xde	; 0xde <enc28j60WriteOp>
 39c:	6f e1       	ldi	r22, 0x1F	; 31
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 5a 00 	call	0xb4	; 0xb4 <enc28j60ReadOp>
 3a4:	83 fd       	sbrc	r24, 3
 3a6:	eb cf       	rjmp	.-42     	; 0x37e <enc28j60PacketSend+0xe>
 3a8:	6f ef       	ldi	r22, 0xFF	; 255
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 3b0:	69 e1       	ldi	r22, 0x19	; 25
 3b2:	83 e0       	ldi	r24, 0x03	; 3
 3b4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 3b8:	6c 2f       	mov	r22, r28
 3ba:	61 50       	subi	r22, 0x01	; 1
 3bc:	86 e0       	ldi	r24, 0x06	; 6
 3be:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 3c2:	ce 01       	movw	r24, r28
 3c4:	81 50       	subi	r24, 0x01	; 1
 3c6:	96 4e       	sbci	r25, 0xE6	; 230
 3c8:	69 2f       	mov	r22, r25
 3ca:	87 e0       	ldi	r24, 0x07	; 7
 3cc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	8a e7       	ldi	r24, 0x7A	; 122
 3d6:	0e 94 6f 00 	call	0xde	; 0xde <enc28j60WriteOp>
 3da:	b8 01       	movw	r22, r16
 3dc:	ce 01       	movw	r24, r28
 3de:	0e 94 96 00 	call	0x12c	; 0x12c <enc28j60WriteBuffer>
 3e2:	48 e0       	ldi	r20, 0x08	; 8
 3e4:	6f e1       	ldi	r22, 0x1F	; 31
 3e6:	80 e8       	ldi	r24, 0x80	; 128
 3e8:	0e 94 6f 00 	call	0xde	; 0xde <enc28j60WriteOp>
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	08 95       	ret

000003f6 <enc28j60PacketReceive>:
 3f6:	af 92       	push	r10
 3f8:	bf 92       	push	r11
 3fa:	cf 92       	push	r12
 3fc:	df 92       	push	r13
 3fe:	ef 92       	push	r14
 400:	ff 92       	push	r15
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	6c 01       	movw	r12, r24
 40c:	7b 01       	movw	r14, r22
 40e:	89 e3       	ldi	r24, 0x39	; 57
 410:	0e 94 d6 00 	call	0x1ac	; 0x1ac <enc28j60Read>
 414:	88 23       	and	r24, r24
 416:	09 f4       	brne	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	6d c0       	rjmp	.+218    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 41a:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <__data_end>
 41e:	c0 91 29 01 	lds	r28, 0x0129	; 0x800129 <__data_end+0x1>
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 428:	6c 2f       	mov	r22, r28
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	8a e3       	ldi	r24, 0x3A	; 58
 434:	0e 94 5a 00 	call	0xb4	; 0xb4 <enc28j60ReadOp>
 438:	c8 2f       	mov	r28, r24
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	8a e3       	ldi	r24, 0x3A	; 58
 43e:	0e 94 5a 00 	call	0xb4	; 0xb4 <enc28j60ReadOp>
 442:	d0 e0       	ldi	r29, 0x00	; 0
 444:	d8 2b       	or	r29, r24
 446:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__data_end+0x1>
 44a:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__data_end>
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	8a e3       	ldi	r24, 0x3A	; 58
 452:	0e 94 5a 00 	call	0xb4	; 0xb4 <enc28j60ReadOp>
 456:	b8 2e       	mov	r11, r24
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	8a e3       	ldi	r24, 0x3A	; 58
 45c:	0e 94 5a 00 	call	0xb4	; 0xb4 <enc28j60ReadOp>
 460:	a8 2e       	mov	r10, r24
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	8a e3       	ldi	r24, 0x3A	; 58
 466:	0e 94 5a 00 	call	0xb4	; 0xb4 <enc28j60ReadOp>
 46a:	08 2f       	mov	r16, r24
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	8a e3       	ldi	r24, 0x3A	; 58
 470:	0e 94 5a 00 	call	0xb4	; 0xb4 <enc28j60ReadOp>
 474:	07 ff       	sbrs	r16, 7
 476:	11 c0       	rjmp	.+34     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	c8 1a       	sub	r12, r24
 47c:	d1 08       	sbc	r13, r1
 47e:	0b 2d       	mov	r16, r11
 480:	10 e0       	ldi	r17, 0x00	; 0
 482:	1a 29       	or	r17, r10
 484:	04 50       	subi	r16, 0x04	; 4
 486:	11 09       	sbc	r17, r1
 488:	c0 16       	cp	r12, r16
 48a:	d1 06       	cpc	r13, r17
 48c:	08 f4       	brcc	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 48e:	86 01       	movw	r16, r12
 490:	b7 01       	movw	r22, r14
 492:	c8 01       	movw	r24, r16
 494:	0e 94 7c 00 	call	0xf8	; 0xf8 <enc28j60ReadBuffer>
 498:	02 c0       	rjmp	.+4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49a:	00 e0       	ldi	r16, 0x00	; 0
 49c:	10 e0       	ldi	r17, 0x00	; 0
 49e:	6c 2f       	mov	r22, r28
 4a0:	8c e0       	ldi	r24, 0x0C	; 12
 4a2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 4a6:	6d 2f       	mov	r22, r29
 4a8:	8d e0       	ldi	r24, 0x0D	; 13
 4aa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 4ae:	7e 01       	movw	r14, r28
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	e8 1a       	sub	r14, r24
 4b4:	f1 08       	sbc	r15, r1
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	e8 16       	cp	r14, r24
 4ba:	89 e1       	ldi	r24, 0x19	; 25
 4bc:	f8 06       	cpc	r15, r24
 4be:	48 f0       	brcs	.+18     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4c0:	6e ef       	ldi	r22, 0xFE	; 254
 4c2:	8c e0       	ldi	r24, 0x0C	; 12
 4c4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 4c8:	69 e1       	ldi	r22, 0x19	; 25
 4ca:	8d e0       	ldi	r24, 0x0D	; 13
 4cc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4d2:	6c 2f       	mov	r22, r28
 4d4:	61 50       	subi	r22, 0x01	; 1
 4d6:	8c e0       	ldi	r24, 0x0C	; 12
 4d8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 4dc:	6f 2d       	mov	r22, r15
 4de:	8d e0       	ldi	r24, 0x0D	; 13
 4e0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <enc28j60Write>
 4e4:	40 e4       	ldi	r20, 0x40	; 64
 4e6:	6e e1       	ldi	r22, 0x1E	; 30
 4e8:	80 e8       	ldi	r24, 0x80	; 128
 4ea:	0e 94 6f 00 	call	0xde	; 0xde <enc28j60WriteOp>
 4ee:	80 2f       	mov	r24, r16
 4f0:	91 2f       	mov	r25, r17
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	0f 91       	pop	r16
 500:	ff 90       	pop	r15
 502:	ef 90       	pop	r14
 504:	df 90       	pop	r13
 506:	cf 90       	pop	r12
 508:	bf 90       	pop	r11
 50a:	af 90       	pop	r10
 50c:	08 95       	ret

0000050e <checksum>:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
        make_tcp_ack_with_data_noflags(buf,dlen); // send data
}
 50e:	cf 92       	push	r12
 510:	df 92       	push	r13
 512:	ef 92       	push	r14
 514:	ff 92       	push	r15
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	ec 01       	movw	r28, r24
 51c:	db 01       	movw	r26, r22
 51e:	41 30       	cpi	r20, 0x01	; 1
 520:	61 f4       	brne	.+24     	; 0x53a <checksum+0x2c>
 522:	6b 01       	movw	r12, r22
 524:	88 e0       	ldi	r24, 0x08	; 8
 526:	c8 1a       	sub	r12, r24
 528:	d1 08       	sbc	r13, r1
 52a:	e1 2c       	mov	r14, r1
 52c:	f1 2c       	mov	r15, r1
 52e:	81 e1       	ldi	r24, 0x11	; 17
 530:	c8 0e       	add	r12, r24
 532:	d1 1c       	adc	r13, r1
 534:	e1 1c       	adc	r14, r1
 536:	f1 1c       	adc	r15, r1
 538:	11 c0       	rjmp	.+34     	; 0x55c <checksum+0x4e>
 53a:	42 30       	cpi	r20, 0x02	; 2
 53c:	61 f4       	brne	.+24     	; 0x556 <checksum+0x48>
 53e:	6b 01       	movw	r12, r22
 540:	88 e0       	ldi	r24, 0x08	; 8
 542:	c8 1a       	sub	r12, r24
 544:	d1 08       	sbc	r13, r1
 546:	e1 2c       	mov	r14, r1
 548:	f1 2c       	mov	r15, r1
 54a:	86 e0       	ldi	r24, 0x06	; 6
 54c:	c8 0e       	add	r12, r24
 54e:	d1 1c       	adc	r13, r1
 550:	e1 1c       	adc	r14, r1
 552:	f1 1c       	adc	r15, r1
 554:	03 c0       	rjmp	.+6      	; 0x55c <checksum+0x4e>
 556:	c1 2c       	mov	r12, r1
 558:	d1 2c       	mov	r13, r1
 55a:	76 01       	movw	r14, r12
 55c:	a2 30       	cpi	r26, 0x02	; 2
 55e:	b1 05       	cpc	r27, r1
 560:	f0 f0       	brcs	.+60     	; 0x59e <checksum+0x90>
 562:	9d 01       	movw	r18, r26
 564:	fe 01       	movw	r30, r28
 566:	40 81       	ld	r20, Z
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	76 2f       	mov	r23, r22
 570:	65 2f       	mov	r22, r21
 572:	54 2f       	mov	r21, r20
 574:	44 27       	eor	r20, r20
 576:	81 81       	ldd	r24, Z+1	; 0x01
 578:	48 2b       	or	r20, r24
 57a:	c4 0e       	add	r12, r20
 57c:	d5 1e       	adc	r13, r21
 57e:	e6 1e       	adc	r14, r22
 580:	f7 1e       	adc	r15, r23
 582:	32 96       	adiw	r30, 0x02	; 2
 584:	22 50       	subi	r18, 0x02	; 2
 586:	31 09       	sbc	r19, r1
 588:	22 30       	cpi	r18, 0x02	; 2
 58a:	31 05       	cpc	r19, r1
 58c:	60 f7       	brcc	.-40     	; 0x566 <checksum+0x58>
 58e:	cd 01       	movw	r24, r26
 590:	02 97       	sbiw	r24, 0x02	; 2
 592:	8e 7f       	andi	r24, 0xFE	; 254
 594:	02 96       	adiw	r24, 0x02	; 2
 596:	c8 0f       	add	r28, r24
 598:	d9 1f       	adc	r29, r25
 59a:	a1 70       	andi	r26, 0x01	; 1
 59c:	bb 27       	eor	r27, r27
 59e:	ab 2b       	or	r26, r27
 5a0:	61 f0       	breq	.+24     	; 0x5ba <checksum+0xac>
 5a2:	88 81       	ld	r24, Y
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	a0 e0       	ldi	r26, 0x00	; 0
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	ba 2f       	mov	r27, r26
 5ac:	a9 2f       	mov	r26, r25
 5ae:	98 2f       	mov	r25, r24
 5b0:	88 27       	eor	r24, r24
 5b2:	c8 0e       	add	r12, r24
 5b4:	d9 1e       	adc	r13, r25
 5b6:	ea 1e       	adc	r14, r26
 5b8:	fb 1e       	adc	r15, r27
 5ba:	a7 01       	movw	r20, r14
 5bc:	66 27       	eor	r22, r22
 5be:	77 27       	eor	r23, r23
 5c0:	41 15       	cp	r20, r1
 5c2:	51 05       	cpc	r21, r1
 5c4:	61 05       	cpc	r22, r1
 5c6:	71 05       	cpc	r23, r1
 5c8:	71 f0       	breq	.+28     	; 0x5e6 <checksum+0xd8>
 5ca:	ee 24       	eor	r14, r14
 5cc:	ff 24       	eor	r15, r15
 5ce:	c4 0e       	add	r12, r20
 5d0:	d5 1e       	adc	r13, r21
 5d2:	e6 1e       	adc	r14, r22
 5d4:	f7 1e       	adc	r15, r23
 5d6:	a7 01       	movw	r20, r14
 5d8:	66 27       	eor	r22, r22
 5da:	77 27       	eor	r23, r23
 5dc:	41 15       	cp	r20, r1
 5de:	51 05       	cpc	r21, r1
 5e0:	61 05       	cpc	r22, r1
 5e2:	71 05       	cpc	r23, r1
 5e4:	91 f7       	brne	.-28     	; 0x5ca <checksum+0xbc>
 5e6:	c6 01       	movw	r24, r12
 5e8:	80 95       	com	r24
 5ea:	90 95       	com	r25
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	ff 90       	pop	r15
 5f2:	ef 90       	pop	r14
 5f4:	df 90       	pop	r13
 5f6:	cf 90       	pop	r12
 5f8:	08 95       	ret

000005fa <init_ip_arp_udp_tcp>:
 5fa:	50 93 35 01 	sts	0x0135, r21	; 0x800135 <wwwport_h>
 5fe:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
 602:	a6 2f       	mov	r26, r22
 604:	b7 2f       	mov	r27, r23
 606:	eb e2       	ldi	r30, 0x2B	; 43
 608:	f1 e0       	ldi	r31, 0x01	; 1
 60a:	4f e2       	ldi	r20, 0x2F	; 47
 60c:	51 e0       	ldi	r21, 0x01	; 1
 60e:	2d 91       	ld	r18, X+
 610:	21 93       	st	Z+, r18
 612:	e4 17       	cp	r30, r20
 614:	f5 07       	cpc	r31, r21
 616:	d9 f7       	brne	.-10     	; 0x60e <init_ip_arp_udp_tcp+0x14>
 618:	a8 2f       	mov	r26, r24
 61a:	b9 2f       	mov	r27, r25
 61c:	ef e2       	ldi	r30, 0x2F	; 47
 61e:	f1 e0       	ldi	r31, 0x01	; 1
 620:	25 e3       	ldi	r18, 0x35	; 53
 622:	31 e0       	ldi	r19, 0x01	; 1
 624:	8d 91       	ld	r24, X+
 626:	81 93       	st	Z+, r24
 628:	e2 17       	cp	r30, r18
 62a:	f3 07       	cpc	r31, r19
 62c:	d9 f7       	brne	.-10     	; 0x624 <init_ip_arp_udp_tcp+0x2a>
 62e:	08 95       	ret

00000630 <eth_type_is_arp_and_my_ip>:
 630:	69 32       	cpi	r22, 0x29	; 41
 632:	71 05       	cpc	r23, r1
 634:	c8 f0       	brcs	.+50     	; 0x668 <eth_type_is_arp_and_my_ip+0x38>
 636:	fc 01       	movw	r30, r24
 638:	24 85       	ldd	r18, Z+12	; 0x0c
 63a:	28 30       	cpi	r18, 0x08	; 8
 63c:	b9 f4       	brne	.+46     	; 0x66c <eth_type_is_arp_and_my_ip+0x3c>
 63e:	25 85       	ldd	r18, Z+13	; 0x0d
 640:	26 30       	cpi	r18, 0x06	; 6
 642:	b1 f4       	brne	.+44     	; 0x670 <eth_type_is_arp_and_my_ip+0x40>
 644:	36 a1       	ldd	r19, Z+38	; 0x26
 646:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <ipaddr>
 64a:	32 13       	cpse	r19, r18
 64c:	13 c0       	rjmp	.+38     	; 0x674 <eth_type_is_arp_and_my_ip+0x44>
 64e:	b7 96       	adiw	r30, 0x27	; 39
 650:	ac e2       	ldi	r26, 0x2C	; 44
 652:	b1 e0       	ldi	r27, 0x01	; 1
 654:	8a 96       	adiw	r24, 0x2a	; 42
 656:	31 91       	ld	r19, Z+
 658:	2d 91       	ld	r18, X+
 65a:	32 13       	cpse	r19, r18
 65c:	0d c0       	rjmp	.+26     	; 0x678 <eth_type_is_arp_and_my_ip+0x48>
 65e:	e8 17       	cp	r30, r24
 660:	f9 07       	cpc	r31, r25
 662:	c9 f7       	brne	.-14     	; 0x656 <eth_type_is_arp_and_my_ip+0x26>
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	08 95       	ret
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	08 95       	ret
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	08 95       	ret
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	08 95       	ret
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	08 95       	ret
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	08 95       	ret

0000067c <eth_type_is_ip_and_my_ip>:
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	fc 01       	movw	r30, r24
 682:	6a 32       	cpi	r22, 0x2A	; 42
 684:	71 05       	cpc	r23, r1
 686:	e0 f0       	brcs	.+56     	; 0x6c0 <eth_type_is_ip_and_my_ip+0x44>
 688:	84 85       	ldd	r24, Z+12	; 0x0c
 68a:	88 30       	cpi	r24, 0x08	; 8
 68c:	d9 f4       	brne	.+54     	; 0x6c4 <eth_type_is_ip_and_my_ip+0x48>
 68e:	85 85       	ldd	r24, Z+13	; 0x0d
 690:	81 11       	cpse	r24, r1
 692:	1a c0       	rjmp	.+52     	; 0x6c8 <eth_type_is_ip_and_my_ip+0x4c>
 694:	96 85       	ldd	r25, Z+14	; 0x0e
 696:	95 34       	cpi	r25, 0x45	; 69
 698:	c1 f4       	brne	.+48     	; 0x6ca <eth_type_is_ip_and_my_ip+0x4e>
 69a:	26 8d       	ldd	r18, Z+30	; 0x1e
 69c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <ipaddr>
 6a0:	29 13       	cpse	r18, r25
 6a2:	13 c0       	rjmp	.+38     	; 0x6ca <eth_type_is_ip_and_my_ip+0x4e>
 6a4:	df 01       	movw	r26, r30
 6a6:	5f 96       	adiw	r26, 0x1f	; 31
 6a8:	cc e2       	ldi	r28, 0x2C	; 44
 6aa:	d1 e0       	ldi	r29, 0x01	; 1
 6ac:	b2 96       	adiw	r30, 0x22	; 34
 6ae:	2d 91       	ld	r18, X+
 6b0:	99 91       	ld	r25, Y+
 6b2:	29 13       	cpse	r18, r25
 6b4:	0a c0       	rjmp	.+20     	; 0x6ca <eth_type_is_ip_and_my_ip+0x4e>
 6b6:	ae 17       	cp	r26, r30
 6b8:	bf 07       	cpc	r27, r31
 6ba:	c9 f7       	brne	.-14     	; 0x6ae <eth_type_is_ip_and_my_ip+0x32>
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	05 c0       	rjmp	.+10     	; 0x6ca <eth_type_is_ip_and_my_ip+0x4e>
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	03 c0       	rjmp	.+6      	; 0x6ca <eth_type_is_ip_and_my_ip+0x4e>
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	01 c0       	rjmp	.+2      	; 0x6ca <eth_type_is_ip_and_my_ip+0x4e>
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	08 95       	ret

000006d0 <make_eth>:
 6d0:	fc 01       	movw	r30, r24
 6d2:	af e2       	ldi	r26, 0x2F	; 47
 6d4:	b1 e0       	ldi	r27, 0x01	; 1
 6d6:	9c 01       	movw	r18, r24
 6d8:	2a 5f       	subi	r18, 0xFA	; 250
 6da:	3f 4f       	sbci	r19, 0xFF	; 255
 6dc:	86 81       	ldd	r24, Z+6	; 0x06
 6de:	81 93       	st	Z+, r24
 6e0:	8d 91       	ld	r24, X+
 6e2:	85 83       	std	Z+5, r24	; 0x05
 6e4:	e2 17       	cp	r30, r18
 6e6:	f3 07       	cpc	r31, r19
 6e8:	c9 f7       	brne	.-14     	; 0x6dc <make_eth+0xc>
 6ea:	08 95       	ret

000006ec <fill_ip_hdr_checksum>:
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	ec 01       	movw	r28, r24
 6f2:	18 8e       	std	Y+24, r1	; 0x18
 6f4:	19 8e       	std	Y+25, r1	; 0x19
 6f6:	80 e4       	ldi	r24, 0x40	; 64
 6f8:	8c 8b       	std	Y+20, r24	; 0x14
 6fa:	1d 8a       	std	Y+21, r1	; 0x15
 6fc:	8e 8b       	std	Y+22, r24	; 0x16
 6fe:	40 e0       	ldi	r20, 0x00	; 0
 700:	64 e1       	ldi	r22, 0x14	; 20
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	ce 01       	movw	r24, r28
 706:	0e 96       	adiw	r24, 0x0e	; 14
 708:	0e 94 87 02 	call	0x50e	; 0x50e <checksum>
 70c:	98 8f       	std	Y+24, r25	; 0x18
 70e:	89 8f       	std	Y+25, r24	; 0x19
 710:	df 91       	pop	r29
 712:	cf 91       	pop	r28
 714:	08 95       	ret

00000716 <make_ip>:
 716:	ac 01       	movw	r20, r24
 718:	ab e2       	ldi	r26, 0x2B	; 43
 71a:	b1 e0       	ldi	r27, 0x01	; 1
 71c:	fc 01       	movw	r30, r24
 71e:	7a 96       	adiw	r30, 0x1a	; 26
 720:	2f e2       	ldi	r18, 0x2F	; 47
 722:	31 e0       	ldi	r19, 0x01	; 1
 724:	90 81       	ld	r25, Z
 726:	94 83       	std	Z+4, r25	; 0x04
 728:	9d 91       	ld	r25, X+
 72a:	91 93       	st	Z+, r25
 72c:	a2 17       	cp	r26, r18
 72e:	b3 07       	cpc	r27, r19
 730:	c9 f7       	brne	.-14     	; 0x724 <make_ip+0xe>
 732:	ca 01       	movw	r24, r20
 734:	0e 94 76 03 	call	0x6ec	; 0x6ec <fill_ip_hdr_checksum>
 738:	08 95       	ret

0000073a <make_arp_answer_from_request>:
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
 73e:	ec 01       	movw	r28, r24
 740:	0e 94 68 03 	call	0x6d0	; 0x6d0 <make_eth>
 744:	1c 8a       	std	Y+20, r1	; 0x14
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	8d 8b       	std	Y+21, r24	; 0x15
 74a:	af e2       	ldi	r26, 0x2F	; 47
 74c:	b1 e0       	ldi	r27, 0x01	; 1
 74e:	fe 01       	movw	r30, r28
 750:	76 96       	adiw	r30, 0x16	; 22
 752:	25 e3       	ldi	r18, 0x35	; 53
 754:	31 e0       	ldi	r19, 0x01	; 1
 756:	80 81       	ld	r24, Z
 758:	82 87       	std	Z+10, r24	; 0x0a
 75a:	8d 91       	ld	r24, X+
 75c:	81 93       	st	Z+, r24
 75e:	a2 17       	cp	r26, r18
 760:	b3 07       	cpc	r27, r19
 762:	c9 f7       	brne	.-14     	; 0x756 <make_arp_answer_from_request+0x1c>
 764:	ab e2       	ldi	r26, 0x2B	; 43
 766:	b1 e0       	ldi	r27, 0x01	; 1
 768:	fe 01       	movw	r30, r28
 76a:	7c 96       	adiw	r30, 0x1c	; 28
 76c:	2f e2       	ldi	r18, 0x2F	; 47
 76e:	31 e0       	ldi	r19, 0x01	; 1
 770:	80 81       	ld	r24, Z
 772:	82 87       	std	Z+10, r24	; 0x0a
 774:	8d 91       	ld	r24, X+
 776:	81 93       	st	Z+, r24
 778:	a2 17       	cp	r26, r18
 77a:	b3 07       	cpc	r27, r19
 77c:	c9 f7       	brne	.-14     	; 0x770 <make_arp_answer_from_request+0x36>
 77e:	be 01       	movw	r22, r28
 780:	8a e2       	ldi	r24, 0x2A	; 42
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 b8 01 	call	0x370	; 0x370 <enc28j60PacketSend>
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	08 95       	ret

0000078e <make_echo_reply_from_request>:
 78e:	0f 93       	push	r16
 790:	1f 93       	push	r17
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
 796:	ec 01       	movw	r28, r24
 798:	8b 01       	movw	r16, r22
 79a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <make_eth>
 79e:	ce 01       	movw	r24, r28
 7a0:	0e 94 8b 03 	call	0x716	; 0x716 <make_ip>
 7a4:	1a a2       	std	Y+34, r1	; 0x22
 7a6:	8c a1       	ldd	r24, Y+36	; 0x24
 7a8:	88 3f       	cpi	r24, 0xF8	; 248
 7aa:	18 f0       	brcs	.+6      	; 0x7b2 <make_echo_reply_from_request+0x24>
 7ac:	9d a1       	ldd	r25, Y+37	; 0x25
 7ae:	9f 5f       	subi	r25, 0xFF	; 255
 7b0:	9d a3       	std	Y+37, r25	; 0x25
 7b2:	88 5f       	subi	r24, 0xF8	; 248
 7b4:	8c a3       	std	Y+36, r24	; 0x24
 7b6:	be 01       	movw	r22, r28
 7b8:	c8 01       	movw	r24, r16
 7ba:	0e 94 b8 01 	call	0x370	; 0x370 <enc28j60PacketSend>
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	1f 91       	pop	r17
 7c4:	0f 91       	pop	r16
 7c6:	08 95       	ret

000007c8 <fill_buf_p>:

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const PROGMEM *progmem_s)
{
 7c8:	dc 01       	movw	r26, r24
 7ca:	fa 01       	movw	r30, r20
        while (len){
 7cc:	61 15       	cp	r22, r1
 7ce:	71 05       	cpc	r23, r1
 7d0:	41 f0       	breq	.+16     	; 0x7e2 <fill_buf_p+0x1a>
 7d2:	68 0f       	add	r22, r24
 7d4:	79 1f       	adc	r23, r25
                *buf= pgm_read_byte(progmem_s);
 7d6:	84 91       	lpm	r24, Z
 7d8:	8d 93       	st	X+, r24
                buf++;
                progmem_s++;
 7da:	32 96       	adiw	r30, 0x02	; 2

#if defined (NTP_client) ||  defined (WOL_client) || defined (UDP_client) || defined (TCP_client)
// fill buffer with a prog-mem string
void fill_buf_p(uint8_t *buf,uint16_t len, const PROGMEM *progmem_s)
{
        while (len){
 7dc:	6a 17       	cp	r22, r26
 7de:	7b 07       	cpc	r23, r27
 7e0:	d1 f7       	brne	.-12     	; 0x7d6 <fill_buf_p+0xe>
 7e2:	08 95       	ret

000007e4 <send_udp_prepare>:
// 2) You just allocate a large enough buffer for you data and you call send_udp and nothing else
// needs to be done.
//
// send_udp sends via gwip, you must call client_set_gwip at startu
void send_udp_prepare(uint8_t *buf,uint16_t sport, uint8_t *dip, uint16_t dport)
{
 7e4:	af 92       	push	r10
 7e6:	bf 92       	push	r11
 7e8:	cf 92       	push	r12
 7ea:	df 92       	push	r13
 7ec:	ef 92       	push	r14
 7ee:	ff 92       	push	r15
 7f0:	0f 93       	push	r16
 7f2:	1f 93       	push	r17
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
 7f8:	5c 01       	movw	r10, r24
 7fa:	16 2f       	mov	r17, r22
 7fc:	07 2f       	mov	r16, r23
 7fe:	c4 2e       	mov	r12, r20
 800:	d5 2e       	mov	r13, r21
 802:	f2 2e       	mov	r15, r18
 804:	e3 2e       	mov	r14, r19
 806:	a1 e2       	ldi	r26, 0x21	; 33
 808:	b1 e0       	ldi	r27, 0x01	; 1
 80a:	fc 01       	movw	r30, r24
 80c:	8f e2       	ldi	r24, 0x2F	; 47
 80e:	91 e0       	ldi	r25, 0x01	; 1
 810:	47 e2       	ldi	r20, 0x27	; 39
 812:	51 e0       	ldi	r21, 0x01	; 1
        uint8_t i=0;
        //
        while(i<6){
                 //buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac ORJINALI BUYDU
                 buf[ETH_DST_MAC +i]=dest_mac_address[i]; // gw mac in local lan or host mac
 814:	2d 91       	ld	r18, X+
 816:	21 93       	st	Z+, r18
                 buf[ETH_SRC_MAC +i]=macaddr[i];
 818:	ec 01       	movw	r28, r24
 81a:	29 91       	ld	r18, Y+
 81c:	ce 01       	movw	r24, r28
 81e:	25 83       	std	Z+5, r18	; 0x05
// send_udp sends via gwip, you must call client_set_gwip at startu
void send_udp_prepare(uint8_t *buf,uint16_t sport, uint8_t *dip, uint16_t dport)
{
        uint8_t i=0;
        //
        while(i<6){
 820:	a4 17       	cp	r26, r20
 822:	b5 07       	cpc	r27, r21
 824:	b9 f7       	brne	.-18     	; 0x814 <send_udp_prepare+0x30>
                 //buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac ORJINALI BUYDU
                 buf[ETH_DST_MAC +i]=dest_mac_address[i]; // gw mac in local lan or host mac
                 buf[ETH_SRC_MAC +i]=macaddr[i];
                 i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 826:	88 e0       	ldi	r24, 0x08	; 8
 828:	f5 01       	movw	r30, r10
 82a:	84 87       	std	Z+12, r24	; 0x0c
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 82c:	15 86       	std	Z+13, r1	; 0x0d
        fill_buf_p(&buf[IP_P],9,iphdr);
 82e:	4c e6       	ldi	r20, 0x6C	; 108
 830:	50 e0       	ldi	r21, 0x00	; 0
 832:	69 e0       	ldi	r22, 0x09	; 9
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	c5 01       	movw	r24, r10
 838:	0e 96       	adiw	r24, 0x0e	; 14
 83a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <fill_buf_p>
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
 83e:	e5 01       	movw	r28, r10
 840:	18 8a       	std	Y+16, r1	; 0x10
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
 842:	81 e1       	ldi	r24, 0x11	; 17
 844:	8f 8b       	std	Y+23, r24	; 0x17
 846:	8c 2d       	mov	r24, r12
 848:	9d 2d       	mov	r25, r13
 84a:	ab e2       	ldi	r26, 0x2B	; 43
 84c:	b1 e0       	ldi	r27, 0x01	; 1
 84e:	f5 01       	movw	r30, r10
 850:	7a 96       	adiw	r30, 0x1a	; 26
 852:	4f e2       	ldi	r20, 0x2F	; 47
 854:	51 e0       	ldi	r21, 0x01	; 1
        i=0;
        while(i<4){
                buf[IP_DST_P+i]=dip[i];
 856:	ec 01       	movw	r28, r24
 858:	29 91       	ld	r18, Y+
 85a:	ce 01       	movw	r24, r28
 85c:	24 83       	std	Z+4, r18	; 0x04
                buf[IP_SRC_P+i]=ipaddr[i];
 85e:	2d 91       	ld	r18, X+
 860:	21 93       	st	Z+, r18
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
        i=0;
        while(i<4){
 862:	a4 17       	cp	r26, r20
 864:	b5 07       	cpc	r27, r21
 866:	b9 f7       	brne	.-18     	; 0x856 <send_udp_prepare+0x72>
                buf[IP_DST_P+i]=dip[i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        // done in transmit: fill_ip_hdr_checksum(buf);
        buf[UDP_DST_PORT_H_P]=(dport>>8);
 868:	f5 01       	movw	r30, r10
 86a:	e4 a2       	std	Z+36, r14	; 0x24
        buf[UDP_DST_PORT_L_P]=0xff&dport; 
 86c:	f5 a2       	std	Z+37, r15	; 0x25
        buf[UDP_SRC_PORT_H_P]=(sport>>8);
 86e:	02 a3       	std	Z+34, r16	; 0x22
        buf[UDP_SRC_PORT_L_P]=sport&0xff; 
 870:	13 a3       	std	Z+35, r17	; 0x23
        buf[UDP_LEN_H_P]=0;
 872:	16 a2       	std	Z+38, r1	; 0x26
        // done in transmit: buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
 874:	10 a6       	std	Z+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
 876:	11 a6       	std	Z+41, r1	; 0x29
        // copy the data:
        // now starting with the first byte at buf[UDP_DATA_P]
        //
}
 878:	df 91       	pop	r29
 87a:	cf 91       	pop	r28
 87c:	1f 91       	pop	r17
 87e:	0f 91       	pop	r16
 880:	ff 90       	pop	r15
 882:	ef 90       	pop	r14
 884:	df 90       	pop	r13
 886:	cf 90       	pop	r12
 888:	bf 90       	pop	r11
 88a:	af 90       	pop	r10
 88c:	08 95       	ret

0000088e <send_udp_transmit>:

void send_udp_transmit(uint8_t *buf,uint8_t datalen)
{
 88e:	0f 93       	push	r16
 890:	1f 93       	push	r17
 892:	cf 93       	push	r28
 894:	df 93       	push	r29
 896:	ec 01       	movw	r28, r24
 898:	06 2f       	mov	r16, r22
        uint16_t ck;
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
 89a:	8c e1       	ldi	r24, 0x1C	; 28
 89c:	86 0f       	add	r24, r22
 89e:	89 8b       	std	Y+17, r24	; 0x11
        fill_ip_hdr_checksum(buf);
 8a0:	ce 01       	movw	r24, r28
 8a2:	0e 94 76 03 	call	0x6ec	; 0x6ec <fill_ip_hdr_checksum>
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
 8a6:	88 e0       	ldi	r24, 0x08	; 8
 8a8:	80 0f       	add	r24, r16
 8aa:	8f a3       	std	Y+39, r24	; 0x27
        //
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
 8ac:	10 e0       	ldi	r17, 0x00	; 0
 8ae:	b8 01       	movw	r22, r16
 8b0:	60 5f       	subi	r22, 0xF0	; 240
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	41 e0       	ldi	r20, 0x01	; 1
 8b6:	ce 01       	movw	r24, r28
 8b8:	4a 96       	adiw	r24, 0x1a	; 26
 8ba:	0e 94 87 02 	call	0x50e	; 0x50e <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
 8be:	98 a7       	std	Y+40, r25	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
 8c0:	89 a7       	std	Y+41, r24	; 0x29
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
 8c2:	be 01       	movw	r22, r28
 8c4:	c8 01       	movw	r24, r16
 8c6:	8a 96       	adiw	r24, 0x2a	; 42
 8c8:	0e 94 b8 01 	call	0x370	; 0x370 <enc28j60PacketSend>
}
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	1f 91       	pop	r17
 8d2:	0f 91       	pop	r16
 8d4:	08 95       	ret

000008d6 <send_udp>:

void send_udp(uint8_t *buf,char *data,uint8_t datalen,uint16_t sport, uint8_t *dip, uint16_t dport)
{
 8d6:	bf 92       	push	r11
 8d8:	cf 92       	push	r12
 8da:	df 92       	push	r13
 8dc:	ef 92       	push	r14
 8de:	ff 92       	push	r15
 8e0:	0f 93       	push	r16
 8e2:	1f 93       	push	r17
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	ec 01       	movw	r28, r24
 8ea:	b6 2e       	mov	r11, r22
 8ec:	c7 2e       	mov	r12, r23
 8ee:	d4 2e       	mov	r13, r20
 8f0:	b9 01       	movw	r22, r18
 8f2:	a8 01       	movw	r20, r16
 8f4:	97 01       	movw	r18, r14
        send_udp_prepare(buf,sport, dip, dport);
 8f6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <send_udp_prepare>
 8fa:	6d 2d       	mov	r22, r13
 8fc:	6d 3d       	cpi	r22, 0xDD	; 221
 8fe:	08 f0       	brcs	.+2      	; 0x902 <send_udp+0x2c>
 900:	6c ed       	ldi	r22, 0xDC	; 220
        if (datalen>220){
                datalen=220;
        }
        // copy the data:
        i=0;
        while(i<datalen){
 902:	66 23       	and	r22, r22
 904:	81 f0       	breq	.+32     	; 0x926 <send_udp+0x50>
 906:	ab 2d       	mov	r26, r11
 908:	bc 2d       	mov	r27, r12
 90a:	fe 01       	movw	r30, r28
 90c:	ba 96       	adiw	r30, 0x2a	; 42
 90e:	2f ef       	ldi	r18, 0xFF	; 255
 910:	26 0f       	add	r18, r22
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	25 5d       	subi	r18, 0xD5	; 213
 916:	3f 4f       	sbci	r19, 0xFF	; 255
 918:	2c 0f       	add	r18, r28
 91a:	3d 1f       	adc	r19, r29
                buf[UDP_DATA_P+i]=data[i];
 91c:	8d 91       	ld	r24, X+
 91e:	81 93       	st	Z+, r24
        if (datalen>220){
                datalen=220;
        }
        // copy the data:
        i=0;
        while(i<datalen){
 920:	e2 17       	cp	r30, r18
 922:	f3 07       	cpc	r31, r19
 924:	d9 f7       	brne	.-10     	; 0x91c <send_udp+0x46>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        //
        send_udp_transmit(buf,datalen);
 926:	ce 01       	movw	r24, r28
 928:	0e 94 47 04 	call	0x88e	; 0x88e <send_udp_transmit>
}
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	1f 91       	pop	r17
 932:	0f 91       	pop	r16
 934:	ff 90       	pop	r15
 936:	ef 90       	pop	r14
 938:	df 90       	pop	r13
 93a:	cf 90       	pop	r12
 93c:	bf 90       	pop	r11
 93e:	08 95       	ret

00000940 <main>:

int main (void) {
	
	      uint16_t plen;
	      uint16_t  dat_p;
		   DDRD =0XFF;
 940:	8f ef       	ldi	r24, 0xFF	; 255
 942:	8a b9       	out	0x0a, r24	; 10
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 944:	c0 e0       	ldi	r28, 0x00	; 0
 946:	8c 2f       	mov	r24, r28
 948:	8a 95       	dec	r24
 94a:	f1 f7       	brne	.-4      	; 0x948 <main+0x8>
    return (0);
}

static void net_init (void) {
    _delay_loop_1(0);
    enc28j60Init(mac_address);
 94c:	8b e1       	ldi	r24, 0x1B	; 27
 94e:	91 e0       	ldi	r25, 0x01	; 1
 950:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Init>
    enc28j60clkout(2);
 954:	82 e0       	ldi	r24, 0x02	; 2
 956:	0e 94 0b 01 	call	0x216	; 0x216 <enc28j60clkout>
 95a:	8c 2f       	mov	r24, r28
 95c:	8a 95       	dec	r24
 95e:	f1 f7       	brne	.-4      	; 0x95c <main+0x1c>
    _delay_loop_1(0);
    enc28j60PhyWrite(PHLCON,0x476);
 960:	66 e7       	ldi	r22, 0x76	; 118
 962:	74 e0       	ldi	r23, 0x04	; 4
 964:	84 e1       	ldi	r24, 0x14	; 20
 966:	0e 94 ee 00 	call	0x1dc	; 0x1dc <enc28j60PhyWrite>
 96a:	ca 95       	dec	r28
 96c:	f1 f7       	brne	.-4      	; 0x96a <main+0x2a>
    _delay_loop_1(0);
    init_ip_arp_udp_tcp(mac_address,local_host,local_port);
 96e:	40 ed       	ldi	r20, 0xD0	; 208
 970:	57 e0       	ldi	r21, 0x07	; 7
 972:	67 e1       	ldi	r22, 0x17	; 23
 974:	71 e0       	ldi	r23, 0x01	; 1
 976:	8b e1       	ldi	r24, 0x1B	; 27
 978:	91 e0       	ldi	r25, 0x01	; 1
 97a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <init_ip_arp_udp_tcp>
		  
          net_init();
          while(1) {
			
		    
			 plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
 97e:	60 e4       	ldi	r22, 0x40	; 64
 980:	71 e0       	ldi	r23, 0x01	; 1
 982:	8a e8       	ldi	r24, 0x8A	; 138
 984:	92 e0       	ldi	r25, 0x02	; 2
 986:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <enc28j60PacketReceive>
 98a:	ec 01       	movw	r28, r24
			 
			 if(plen==0) continue;
 98c:	00 97       	sbiw	r24, 0x00	; 0
 98e:	b9 f3       	breq	.-18     	; 0x97e <main+0x3e>
		  
			 if(eth_type_is_arp_and_my_ip(buf,plen)){
 990:	bc 01       	movw	r22, r24
 992:	80 e4       	ldi	r24, 0x40	; 64
 994:	91 e0       	ldi	r25, 0x01	; 1
 996:	0e 94 18 03 	call	0x630	; 0x630 <eth_type_is_arp_and_my_ip>
 99a:	89 2b       	or	r24, r25
 99c:	29 f0       	breq	.+10     	; 0x9a8 <main+0x68>
				 make_arp_answer_from_request(buf);
 99e:	80 e4       	ldi	r24, 0x40	; 64
 9a0:	91 e0       	ldi	r25, 0x01	; 1
 9a2:	0e 94 9d 03 	call	0x73a	; 0x73a <make_arp_answer_from_request>
				 continue;
 9a6:	eb cf       	rjmp	.-42     	; 0x97e <main+0x3e>
			  }

 			 ////// check if ip packets are for us:
               if(eth_type_is_ip_and_my_ip(buf,plen)==0){
 9a8:	be 01       	movw	r22, r28
 9aa:	80 e4       	ldi	r24, 0x40	; 64
 9ac:	91 e0       	ldi	r25, 0x01	; 1
 9ae:	0e 94 3e 03 	call	0x67c	; 0x67c <eth_type_is_ip_and_my_ip>
 9b2:	88 23       	and	r24, r24
 9b4:	21 f3       	breq	.-56     	; 0x97e <main+0x3e>
                continue;
               }
			    send_udp(buf2,data,sizeof(data),local_port,remote_host,remote_port);
 9b6:	0f 2e       	mov	r0, r31
 9b8:	f0 e8       	ldi	r31, 0x80	; 128
 9ba:	ef 2e       	mov	r14, r31
 9bc:	f5 e2       	ldi	r31, 0x25	; 37
 9be:	ff 2e       	mov	r15, r31
 9c0:	f0 2d       	mov	r31, r0
 9c2:	03 e1       	ldi	r16, 0x13	; 19
 9c4:	11 e0       	ldi	r17, 0x01	; 1
 9c6:	20 ed       	ldi	r18, 0xD0	; 208
 9c8:	37 e0       	ldi	r19, 0x07	; 7
 9ca:	42 e1       	ldi	r20, 0x12	; 18
 9cc:	61 e0       	ldi	r22, 0x01	; 1
 9ce:	71 e0       	ldi	r23, 0x01	; 1
 9d0:	88 e3       	ldi	r24, 0x38	; 56
 9d2:	91 e0       	ldi	r25, 0x01	; 1
 9d4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <send_udp>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9d8:	2f ef       	ldi	r18, 0xFF	; 255
 9da:	83 ed       	ldi	r24, 0xD3	; 211
 9dc:	90 e3       	ldi	r25, 0x30	; 48
 9de:	21 50       	subi	r18, 0x01	; 1
 9e0:	80 40       	sbci	r24, 0x00	; 0
 9e2:	90 40       	sbci	r25, 0x00	; 0
 9e4:	e1 f7       	brne	.-8      	; 0x9de <main+0x9e>
 9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <main+0xa8>
 9e8:	00 00       	nop
			    _delay_ms(1000);

               if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
 9ea:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <buf+0x17>
 9ee:	81 30       	cpi	r24, 0x01	; 1
 9f0:	31 f6       	brne	.-116    	; 0x97e <main+0x3e>
 9f2:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <buf+0x22>
 9f6:	88 30       	cpi	r24, 0x08	; 8
 9f8:	11 f6       	brne	.-124    	; 0x97e <main+0x3e>
 				 ////// a ping packet, let's send reply
                 make_echo_reply_from_request(buf,plen);
 9fa:	be 01       	movw	r22, r28
 9fc:	80 e4       	ldi	r24, 0x40	; 64
 9fe:	91 e0       	ldi	r25, 0x01	; 1
 a00:	0e 94 c7 03 	call	0x78e	; 0x78e <make_echo_reply_from_request>
                 nPingCount ++;
 a04:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <nPingCount>
 a08:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <nPingCount+0x1>
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <nPingCount+0x1>
 a12:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <nPingCount>
                 continue;
 a16:	b3 cf       	rjmp	.-154    	; 0x97e <main+0x3e>

00000a18 <_exit>:
 a18:	f8 94       	cli

00000a1a <__stop_program>:
 a1a:	ff cf       	rjmp	.-2      	; 0xa1a <__stop_program>
